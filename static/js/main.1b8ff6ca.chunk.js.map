{"version":3,"sources":["p2-homeworks/h8/bll/homeWorkReducer.ts","p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h8/HW8.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx","p2-homeworks/h8/HW8.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p1-main/m1-ui/u1-app/App.module.css"],"names":["homeWorkReducer","state","action","type","payload","sort","a","b","name","filter","u","age","SuperButton","red","className","restProps","finalClassName","s","default","initialPeople","_id","HW8","useState","people","setPeople","finalPeople","map","p","users","container","table","allButtons","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"8MAEaA,EAAkB,SAACC,EAAoBC,GAChD,OAAQA,EAAOC,MACX,IAAK,OACD,MAAuB,OAAnBD,EAAOE,QACA,YAAIH,GAAOI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAQD,EAAEC,MAAQ,EAAI,KAEtC,SAAnBN,EAAOE,QACA,YAAIH,GAAOI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,MAAQD,EAAEC,KAAO,GAAK,KAExDP,EACT,IAAK,QACD,OAAO,YAAIA,GACNQ,QAAO,SAAAC,GAAC,OAAIA,EAAEC,IAAM,MACpBN,MAAK,SAACC,EAAEC,GAAH,OAAQD,EAAEK,KAAOJ,EAAEI,KAAO,EAAI,KAE5C,QAAS,OAAOV,I,uCCSTW,EAhBqC,SAAC,GAK/C,IAHEC,EAGH,EAHGA,IAAKC,EAGR,EAHQA,UACFC,EAEN,mCACKC,EAAc,UAAMH,EAAMI,IAAEJ,IAAMI,IAAEC,QAAtB,YAAiCJ,GAErD,OACI,oCACIA,UAAWE,GACPD,K,gBCKVI,EAA4B,CAC9B,CAACC,IAAK,EAAGZ,KAAM,qBAAOG,IAAK,GAC3B,CAACS,IAAK,EAAGZ,KAAM,yDAAaG,IAAK,IACjC,CAACS,IAAK,EAAGZ,KAAM,2BAAQG,IAAK,IAC5B,CAACS,IAAK,EAAGZ,KAAM,uCAAUG,IAAK,IAC9B,CAACS,IAAK,EAAGZ,KAAM,6CAAWG,IAAK,IAC/B,CAACS,IAAK,EAAGZ,KAAM,iCAASG,IAAK,KA8ClBU,MA3Cf,WAAgB,IAAD,EACiBC,mBAAqBH,GADtC,mBACJI,EADI,KACIC,EADJ,KAILC,EAAcF,EAAOG,KAAI,SAACC,GAAD,OAC3B,sBAAKb,UAAWG,IAAEW,MAAlB,UACI,8BACCD,EAAEnB,OAEH,8BACCmB,EAAEhB,QALuBgB,EAAEP,QAgBpC,OACI,gCACI,uBADJ,cAGI,sBAAKN,UAAWG,IAAEY,UAAlB,UACI,qBAAKf,UAAWG,IAAEa,MAAlB,SACKL,IAEL,sBAAKX,UAAWG,IAAEc,WAAlB,UACI,8BAAM,cAAC,EAAD,CAAaC,QAfpB,kBAAMR,EAAUxB,EAAgBmB,EAAe,CAAChB,KAAM,OAAQC,QAAS,SAehE,uBACN,8BAAM,cAAC,EAAD,CAAa4B,QAdlB,kBAAMR,EAAUxB,EAAgBmB,EAAe,CAAChB,KAAM,OAAQC,QAAS,WAclE,yBACN,8BAAM,cAAC,EAAD,CAAa4B,QAbjB,kBAAMR,EAAUxB,EAAgBmB,EAAe,CAAChB,KAAM,QAASC,QAAS,OAapE,8BAGd,uBAGA,2BC7CG6B,MAjBf,WACI,OACI,sBAAKnB,UAAWG,IAAEgB,IAAlB,UACI,mDAQA,cAAC,EAAD,QCVQC,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SDiIpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHC,QAAQD,MAAMA,EAAME,a,kBEhJpCC,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,mBAAmB,MAAQ,mBAAmB,KAAO,kBAAkB,IAAM,iBAAiB,WAAa,wBAAwB,OAAS,sB,kBCAzMD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,kBCA/DD,EAAOC,QAAU,CAAC,IAAM,oB","file":"static/js/main.1b8ff6ca.chunk.js","sourcesContent":["import {ActionsType, UserType} from '../HW8';\r\n\r\nexport const homeWorkReducer = (state: UserType[] , action: ActionsType): UserType[]  => {\r\n    switch (action.type) {\r\n        case 'sort': {\r\n            if (action.payload === 'up') {\r\n                return [...state].sort((a, b) => a.name <= b.name ? -1 : 1)\r\n            }\r\n            if (action.payload === 'down') {\r\n                return [...state].sort((a, b) => a.name <= b.name ? 1 : -1)\r\n            }\r\n        } return state\r\n        case 'check': {\r\n            return [...state]\r\n                .filter(u => u.age > 18)\r\n                .sort((a,b)=> a.age <= b.age ? -1 : 1 )\r\n        }\r\n        default: return state\r\n    }\r\n}","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './SuperButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default SuperButton\r\n","import React, {useState} from 'react'\r\nimport {homeWorkReducer} from './bll/homeWorkReducer'\r\nimport SuperButton from '../h4/common/c2-SuperButton/SuperButton'\r\nimport s from './HW8.module.css'\r\n\r\nexport type UserType = {\r\n    _id: number,\r\n    name: string,\r\n    age: number\r\n}\r\n\r\nexport type sortUpActionType = {\r\n    type: 'sort'\r\n    payload: 'up'\r\n}\r\nexport type sortDownActionType = {\r\n    type: 'sort'\r\n    payload: 'down'\r\n}\r\nexport type sorCheckActionType = {\r\n    type: 'check'\r\n    payload: 18\r\n}\r\n\r\nexport type ActionsType = sortUpActionType | sortDownActionType | sorCheckActionType\r\n\r\nconst initialPeople: UserType[] = [\r\n    {_id: 0, name: 'Кот', age: 3},\r\n    {_id: 1, name: 'Александр', age: 66},\r\n    {_id: 2, name: 'Коля', age: 16},\r\n    {_id: 3, name: 'Виктор', age: 44},\r\n    {_id: 4, name: 'Дмитрий', age: 40},\r\n    {_id: 5, name: 'Ирина', age: 55},\r\n]\r\n\r\nfunction HW8() {\r\n    const [people, setPeople] = useState<UserType[]>(initialPeople)\r\n\r\n\r\n    const finalPeople = people.map((p: UserType) => (\r\n        <div className={s.users} key={p._id}>\r\n            <div >\r\n            {p.name}\r\n            </div>\r\n            <div >\r\n            {p.age}\r\n            </div>\r\n        </div>\r\n    ))\r\n\r\n    const sortUp = () => setPeople(homeWorkReducer(initialPeople, {type: 'sort', payload: 'up'}))\r\n\r\n    const sortDown = () => setPeople(homeWorkReducer(initialPeople, {type: 'sort', payload: 'down'}))\r\n\r\n    const sortCheck = () => setPeople(homeWorkReducer(initialPeople, {type: 'check', payload: 18}))\r\n\r\n    return (\r\n        <div>\r\n            <hr/>\r\n            homeworks 8\r\n            <div className={s.container}>\r\n                <div className={s.table}>\r\n                    {finalPeople}\r\n                </div>\r\n                <div className={s.allButtons}>\r\n                    <div ><SuperButton onClick={sortUp}>sort up</SuperButton></div>\r\n                    <div ><SuperButton onClick={sortDown}>sort down</SuperButton></div>\r\n                    <div ><SuperButton onClick={sortCheck}>check 18</SuperButton></div>\r\n                </div>\r\n            </div>\r\n            <hr/>\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativePeople/>*/}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW8\r\n","import React from 'react'\r\nimport s from './App.module.css'\r\nimport HW1 from '../../../p2-homeworks/h1/HW1'\r\nimport HW2 from '../../../p2-homeworks/h2/HW2';\r\nimport HW3 from '../../../p2-homeworks/h3/HW3';\r\nimport HW4 from '../../../p2-homeworks/h4/HW4';\r\nimport HW5 from '../../../p2-homeworks/h5/HW5';\r\nimport HW6 from '../../../p2-homeworks/h6/HW6';\r\nimport HW7 from '../../../p2-homeworks/h7/HW7';\r\nimport HW8 from '../../../p2-homeworks/h8/HW8';\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n            {/*<HW1/>*/}\r\n            {/*<HW2/>*/}\r\n            {/*<HW3/>*/}\r\n            {/*<HW4/>*/}\r\n            {/*<HW5/>*/}\r\n            {/*<HW6/>*/}\r\n            {/*<HW7/>*/}\r\n            <HW8/>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n)\r\n\r\ntype Config = {\r\n    onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n    onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(\r\n            process.env.PUBLIC_URL,\r\n            window.location.href\r\n        )\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config)\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service ' +\r\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n                    )\r\n                })\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing\r\n                if (installingWorker == null) {\r\n                    return\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all ' +\r\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                            )\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration)\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.')\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error)\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n        headers: {'Service-Worker': 'script'}\r\n    })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type')\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload()\r\n                    })\r\n                })\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config)\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            )\r\n        })\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister()\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message)\r\n            })\r\n    }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './p1-main/m1-ui/u1-app/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"HW8_container__2etmn\",\"table\":\"HW8_table__3Wua_\",\"users\":\"HW8_users__3ro9x\",\"name\":\"HW8_name__rvV-G\",\"age\":\"HW8_age__KOGcC\",\"allButtons\":\"HW8_allButtons__2vaMv\",\"button\":\"HW8_button__3KFo7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__hLGlP\",\"red\":\"SuperButton_red__1bODc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__SJwTR\"};"],"sourceRoot":""}